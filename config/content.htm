<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>每周進度</h1>
<h2>Week1</h2>
<p><span>創建cd2020的倉儲</span></p>
<p><span>創建個人網站</span></p>
<p><span>步驟:</span></p>
<p><span>1.登入github帳號</span></p>
<p><span>2.創建新的倉儲，名稱為cd2020</span></p>
<p><span>3.接著git clone <a href="https://github.com/s40723111/cd2020">https://github.com/s40723149/cd2020</a><span> </span></span></p>
<p><span><span>4.執行git submodule add <a href="https://github.com/mdecourse/cmsimde.git%E5%8F%96%E5%BE%97%E5%AD%90%E6%A8%A1%E7%B5%84%E8%B3%87%E6%96%99">https://github.com/mdecourse/cmsimde.git</a><span> </span></span></span></p>
<p><span><span><span>5.將cmsimde&gt;up_dir裡的所有項目複製到外面的cd2020資料夾裡面</span></span></span></p>
<p><span><span><span>6.cd cmsimde 輸入python -m pip install flask_cors 更改模組</span></span></span></p>
<p><span><span><span>7.接著就能執行python wsgi.py</span></span></span></p>
<p><span><span><span>8.編輯完之後轉為靜態網站，將自己每周的進度記錄在裡面</span></span></span></p>
<h2><span><span><span>Week2</span></span></span></h2>
<p><br/><strong>組長分配工作流程表</strong></p>
<p><strong><img alt="" height="378" src="/images/w2分配工作流程表.jpg" width="379"/></strong><br/><br/></p>
<h2>week3</h2>
<p>開始執行分組工作 個人分配到的是python編程系統更新</p>
<h3>更新Python 3.8.2</h3>
<p><span>1.進入 </span><a href="https://www.python.org/downloads/release/python-382/">https://www.python.org/downloads/release/python-382/</a></p>
<p>2.<span>下載</span><a href="https://s40723114.github.io/get_page/python%20%E6%9B%B4%E6%96%B0%E8%87%B33.8.2/Windows%20x86-64%20executable%20installer">Windows x86-64 executable installer</a></p>
<p><span>3.下載完成後開啟，選擇Customize installation(訂製化安裝)選項</span></p>
<p><img alt="" height="311" src="/images/1 (1).png" width="507"/></p>
<p><span>4.不要勾選pip選項，接著按下next</span></p>
<p><span><img alt="" height="316" src="/images/3.png" width="511"/></span></p>
<p>5.選擇路徑將python安裝至可攜式系統中的Y槽下</p>
<p>6.接著開啟start_mdecourse.bat批次檔</p>
<p>7.將<span>start_mdecourse.bat批次檔中的py373改為安裝python 3.8.2版本的資料夾</span></p>
<p><span>8.將安裝的版本資料夾取名為py382</span></p>
<p><span><img alt="" height="450" src="/images/2.png" width="733"/></span></p>
<p>8.執行stop.bat批次檔後重新啟動start_mdecourse(為了讓檔案重新讀取)<br/><br/></p>
<p>9.輸入get-pip.py，開始安裝pip工具</p>
<p>10.安裝cmsimde所需模組</p>
<p><img alt="" height="21" src="/images/4.png" width="563"/></p>
<p><span>11.檢查版本是否更新至 </span><span>python 3.8.2</span></p>
<p><span><img alt="" height="69" src="/images/6.png" width="755"/></span></p>
<h2><span>week5</span></h2>
<h3>直播內容</h3>
<p><img alt="" height="722" src="/images/擷取.PNG" width="851"/></p>